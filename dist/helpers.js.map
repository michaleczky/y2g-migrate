{"version":3,"sources":["../src/helpers.js"],"names":["readFileAsync","fileName","options","Promise","resolve","reject","fs","readFile","error","data","readJSONAsync","then","JSON","parse"],"mappings":";;;;;;;;AAAA;;;;AAEA,SAASA,aAAT,CAAuBC,QAAvB,EAA+C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC3C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,mBAAGC,QAAH,CAAYN,QAAZ,EAAsB,MAAtB,EAA8B,UAACO,KAAD,EAAQC,IAAR,EAAiB;AAC3C,UAAID,KAAJ,EAAWH,MAAM,CAACG,KAAD,CAAN;AACXJ,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH,KAHD;AAIH,GALM,CAAP;AAMH;;AAED,SAASC,aAAT,CAAuBT,QAAvB,EAAiC;AAC7B,SAAOD,aAAa,CAACC,QAAD,CAAb,CAAwBU,IAAxB,CAA6B,UAACF,IAAD,EAAU;AAC1C,WAAOG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACH,GAFM,CAAP;AAGH","sourcesContent":["import fs from 'fs';\r\n\r\nfunction readFileAsync(fileName, options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(fileName, 'utf8', (error, data) => {\r\n            if (error) reject(error);\r\n            resolve(data);\r\n        })\r\n    });\r\n}\r\n\r\nfunction readJSONAsync(fileName) {\r\n    return readFileAsync(fileName).then((data) => {\r\n        return JSON.parse(data);\r\n    });\r\n}\r\n\r\nexport { readFileAsync, readJSONAsync };"],"file":"helpers.js"}